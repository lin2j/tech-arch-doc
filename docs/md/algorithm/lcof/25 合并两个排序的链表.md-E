[剑指 Offer 25. 合并两个排序的链表](https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/)

**解题思路**：

使用**双指针**来解决这个问题。首先创捷一个伪头节点 $head$，使用 $l1, l2$ 分别指向两个链表，根据 $l1.val$ 和 $l2.val$ 的大小关系添加到 $head$ 链表上，两个指针交替前进，直到遍历完毕。

**算法流程**：
1. 创建伪头节点 $head$，$p$ 指向 $head$。
2. 遍历 $l1$， $l2$ 直到其中一条链表遍历结束
   1. 当 $l1.val < l2.val$ ，$p.next$ 指向 $l1$，$l1$ 指向下一个节点。
   2. 当 $l1.val \geq l2.val$，$p.next$ 指向 $l2$，$l2$ 指向下一个节点。
   3. $p$ 指向下一个节点。
3. 合并剩余的尾部
   1. 如果 $l1$ 不为 $null$，那么 $p.next$ 直接指向 $l1$。
   2. 否则 $p.next$ 指向 $l2$。
4. 返回 $head.next$ 即可。

**代码：**

```java
public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
    ListNode head = new ListNode(-1);
    ListNode p = head;

    while(l1 != null && l2 != null) {
        if(l1.val < l2.val) {
            p.next = l1;
            l1 = l1.next;
        } else {
            p.next = l2;
            l2 = l2.next;
        }
        p = p.next;
    }
    p.next = l1 == null ? l2 : l1;
    return head.next;
}
```

**复杂度分析**

- **时间复杂度 $O(m+n)$**：$m$ 和 $n$ 是两条链表各自的长度，合并操作需要遍历两链表。

- **空间复杂度$O(1)$**：伪头节点 $head$，$p$ 使用常数大小的空间。