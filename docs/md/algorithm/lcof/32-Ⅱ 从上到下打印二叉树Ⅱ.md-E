[剑指 Offer 32 - II. 从上到下打印二叉树 II](https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/)

**解题思路：**

层序遍历，每一层都用一个列表存放起来。

**代码：**

```java
public List<List<Integer>> levelOrder(TreeNode root) {
    List<List<Integer>> ans = new LinkedList<>();
    Deque<TreeNode> queue = new LinkedList<>();
    if(root != null) {
        queue.offer(root);
    }
    while(!queue.isEmpty()) {
        int size = queue.size();
        List<Integer> list = new ArrayList<>(size);
        for(int i = 0; i < size; i++) {
            TreeNode node = queue.poll();
            list.add(node.val);
            if(node.left != null) {
                queue.offer(node.left);
            }
            if(node.right != null) {
                queue.offer(node.right);
            }
        }
        ans.add(list);
    }
    return ans;
}
```

**复杂度分析**

- **时间复杂度$O(N)$**：$N$ 为二叉树的节点总数。
- **空间复杂度$O(N)$**：最差情况下，即当树为平衡二叉树时，最多有 $\frac{N}{2}$ 个树节点**同时**在 `queue` 中，使用 $O(N)$ 大小的额外空间。