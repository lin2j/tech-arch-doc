(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{295:function(e,a,r){"use strict";r.r(a);var t=r(10),v=Object(t.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Java 堆内存被划分为新生代和年老代两部分，新生代主要使用复制和标记-清除垃圾回收算法；年老代主要使用标记-整理垃圾回收算法，因此 java 虚拟中针对新生代和年老代分别提供了多种不同的垃圾收集器 JDK1.6 中 Sun HotSpot 虚拟机的垃圾收集器如下：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://www.lin2j.tech/upload/2021/06/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E6%90%AD%E9%85%8D-cac174d947b74e23a0ee2e1afa62d1d0.png",alt:"垃圾收集器搭配"}})]),e._v(" "),a("h4",{attrs:{id:"serial-垃圾收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serial-垃圾收集器"}},[e._v("#")]),e._v(" Serial 垃圾收集器")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://www.lin2j.tech/upload/2021/06/Serial%20%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8-4ead39a2cc044549a85e7962563ed969.png",alt:"Serial 垃圾收集器"}})]),e._v(" "),a("ol",[a("li",[e._v("Serial 收集器是最基本，历史最悠久的收集器。")]),e._v(" "),a("li",[e._v("Serial 收集器是一个"),a("strong",[e._v("单线程")]),e._v("的收集器，这意味着它不仅是只会使用一个CPU或者一个线程去收集垃圾，而且在垃圾收集的时候，还要"),a("strong",[e._v("暂停其他的工作线程")]),e._v("，直到它收集结束。")]),e._v(" "),a("li",[e._v("Serial 收集器在只有一个CPU的环境下，由于没有线程交互的切换开销，可以更加专心地进行回收，获得最高单线程收集效率。")]),e._v(" "),a("li",[e._v("Serial 收集器对于运行在 Client 模式下的虚拟机来说是一个很好的选择。")])]),e._v(" "),a("blockquote",[a("p",[e._v("JVM有两种运行模式Server与Client。两种模式的区别在于，Client模式启动速度较快，Server模式启动较慢；但是启动进入稳定期长期运行之后Server模式的程序运行速度比Client要快很多。这是因为Server模式启动的JVM采用的是重量级的虚拟机，对程序采用了更多的优化；而Client模式启动的JVM采用的是轻量级的虚拟机。所以Server启动慢，但稳定后速度比Client远远要快。")]),e._v(" "),a("p",[e._v("使用Java -version命令就能显示出当前虚拟机处于哪种模式。")])]),e._v(" "),a("h4",{attrs:{id:"parnew-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parnew-收集器"}},[e._v("#")]),e._v(" ParNew 收集器")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://www.lin2j.tech/upload/2021/06/ParNew%20%E6%94%B6%E9%9B%86%E5%99%A8-2c034ce09d4b40b7ab00b990c1283fd5.png",alt:"ParNew 收集器"}})]),e._v(" "),a("ol",[a("li",[e._v("ParNew 收集器其实就是 "),a("strong",[e._v("Seial 收集器的多线程版本")]),e._v("。")]),e._v(" "),a("li",[e._v("除了使用多线程之外，其他的行为，诸如所有的控制参数、收集算法、Stop The World、对象分配原则，回收策略等都与Serial收集器完全一致。")]),e._v(" "),a("li",[e._v("虽然与 Serial 收集器没有太大的差别，但是 ParNew 仍然是 Server 模式下的虚拟机中首选的收集器。其中一个重要原因就是，"),a("strong",[e._v("目前，除了 Serail 收集器外，只有 ParNew 能够与 CMS 收集器配合工作")]),e._v("。")]),e._v(" "),a("li",[e._v("ParNew 收集器也是使用 "),a("code",[e._v("-XX:+UseConcMarkSweepGC")]),e._v(" 选项后默认的新生代收集器，也可以使用 "),a("code",[e._v("−XX:+UseParNewGC")]),e._v(" 选项来强制使用它。")]),e._v(" "),a("li",[e._v("它"),a("strong",[e._v("默认开启的线程数与CPU的数量相同")]),e._v("，当服务器CPU数量太多时，可以使用"),a("code",[e._v("−XX:ParallelGCThreads")]),e._v(" 参数来限制垃圾收集的线程数。")])])])}),[],!1,null,null,null);a.default=v.exports}}]);